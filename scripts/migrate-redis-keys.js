#!/usr/bin/env node
/**
 * Redis Key Migration Script
 * ‰∏çÁµ±‰∏Ä„Å™„Ç≠„ÉºÂëΩÂêçË¶èÂâá„Çí‰ªïÊßò„Å´Âêà„Çè„Åõ„Å¶‰øÆÊ≠£
 * 
 * ‰øÆÊ≠£ÂÜÖÂÆπ:
 * - bbs_messages:ID:messages ‚Üí bbs:ID:messages
 * - bbs_owner:ID ‚Üí bbs:ID:owner
 * - ranking_scores:ID:scores ‚Üí ranking:ID:scores
 * - ranking_owner:ID ‚Üí ranking:ID:owner
 * 
 * Usage:
 *   npm run migrate:keys
 */

const Redis = require('ioredis')
require('dotenv').config({ path: '.env.local' })

if (!process.env.REDIS_URL) {
  console.log('‚ùå REDIS_URL not set')
  console.log('Please create .env.local file with REDIS_URL')
  process.exit(1)
}

const redis = new Redis(process.env.REDIS_URL)

/**
 * „Ç≠„Éº„ÅÆÁßªÂãï„Å®„Éá„Éº„Çø‰øùÊåÅ
 */
async function migrateKey(oldKey, newKey) {
  const type = await redis.type(oldKey)
  
  if (type === 'none') {
    console.log(`  ‚ö†Ô∏è  ${oldKey} (not found)`)
    return false
  }
  
  try {
    if (type === 'string') {
      const value = await redis.get(oldKey)
      await redis.set(newKey, value)
    } else if (type === 'list') {
      const length = await redis.llen(oldKey)
      if (length > 0) {
        const values = await redis.lrange(oldKey, 0, -1)
        const pipeline = redis.pipeline()
        values.reverse().forEach(value => pipeline.lpush(newKey, value))
        await pipeline.exec()
      }
    } else if (type === 'zset') {
      const members = await redis.zrange(oldKey, 0, -1, 'WITHSCORES')
      if (members.length > 0) {
        const pipeline = redis.pipeline()
        for (let i = 0; i < members.length; i += 2) {
          pipeline.zadd(newKey, members[i + 1], members[i])
        }
        await pipeline.exec()
      }
    } else if (type === 'hash') {
      const hash = await redis.hgetall(oldKey)
      if (Object.keys(hash).length > 0) {
        await redis.hmset(newKey, hash)
      }
    } else if (type === 'set') {
      const members = await redis.smembers(oldKey)
      if (members.length > 0) {
        await redis.sadd(newKey, ...members)
      }
    }
    
    // Âè§„ÅÑ„Ç≠„Éº„ÇíÂâäÈô§
    await redis.del(oldKey)
    console.log(`  ‚úÖ ${oldKey} ‚Üí ${newKey}`)
    return true
  } catch (error) {
    console.log(`  ‚ùå Error migrating ${oldKey}: ${error.message}`)
    return false
  }
}

/**
 * BBSÈñ¢ÈÄ£„Ç≠„Éº„ÅÆÁßªË°å
 */
async function migrateBBSKeys() {
  console.log('\nüîÑ Migrating BBS keys...')
  
  const pipeline = redis.pipeline()
  pipeline.keys('bbs_messages:*:messages')
  pipeline.keys('bbs_owner:*')
  const results = await pipeline.exec()
  
  const messageKeys = results[0][1] || []
  const ownerKeys = results[1][1] || []
  
  let migrated = 0
  
  // „É°„ÉÉ„Çª„Éº„Ç∏„Ç≠„Éº„ÅÆÁßªË°å: bbs_messages:ID:messages ‚Üí bbs:ID:messages
  for (const key of messageKeys) {
    const match = key.match(/^bbs_messages:(.+):messages$/)
    if (match) {
      const id = match[1]
      const newKey = `bbs:${id}:messages`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  // „Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å: bbs_owner:ID ‚Üí bbs:ID:owner
  for (const key of ownerKeys) {
    const match = key.match(/^bbs_owner:(.+)$/)
    if (match) {
      const id = match[1]
      const newKey = `bbs:${id}:owner`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  console.log(`üìä BBS: ${migrated} keys migrated`)
  return migrated
}

/**
 * RankingÈñ¢ÈÄ£„Ç≠„Éº„ÅÆÁßªË°å
 */
async function migrateRankingKeys() {
  console.log('\nüîÑ Migrating Ranking keys...')
  
  const pipeline = redis.pipeline()
  pipeline.keys('ranking_scores:*:scores')
  pipeline.keys('ranking_owner:*')
  const results = await pipeline.exec()
  
  const scoreKeys = results[0][1] || []
  const ownerKeys = results[1][1] || []
  
  let migrated = 0
  
  // „Çπ„Ç≥„Ç¢„Ç≠„Éº„ÅÆÁßªË°å: ranking_scores:ID:scores ‚Üí ranking:ID:scores
  for (const key of scoreKeys) {
    const match = key.match(/^ranking_scores:(.+):scores$/)
    if (match) {
      const id = match[1]
      const newKey = `ranking:${id}:scores`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  // „Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å: ranking_owner:ID ‚Üí ranking:ID:owner
  for (const key of ownerKeys) {
    const match = key.match(/^ranking_owner:(.+)$/)
    if (match) {
      const id = match[1]
      const newKey = `ranking:${id}:owner`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  console.log(`üìä Ranking: ${migrated} keys migrated`)
  return migrated
}

/**
 * CounterÈñ¢ÈÄ£„Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å
 */
async function migrateCounterOwnerKeys() {
  console.log('\nüîÑ Migrating Counter owner keys...')
  
  const ownerKeys = await redis.keys('counter_owner:*')
  let migrated = 0
  
  // „Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å: counter_owner:ID ‚Üí counter:ID:owner
  for (const key of ownerKeys) {
    const match = key.match(/^counter_owner:(.+)$/)
    if (match) {
      const id = match[1]
      const newKey = `counter:${id}:owner`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  console.log(`üìä Counter: ${migrated} owner keys migrated`)
  return migrated
}

/**
 * LikeÈñ¢ÈÄ£„Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å
 */
async function migrateLikeOwnerKeys() {
  console.log('\nüîÑ Migrating Like owner keys...')
  
  const ownerKeys = await redis.keys('like_owner:*')
  let migrated = 0
  
  // „Ç™„Éº„Éä„Éº„Ç≠„Éº„ÅÆÁßªË°å: like_owner:ID ‚Üí like:ID:owner
  for (const key of ownerKeys) {
    const match = key.match(/^like_owner:(.+)$/)
    if (match) {
      const id = match[1]
      const newKey = `like:${id}:owner`
      if (await migrateKey(key, newKey)) {
        migrated++
      }
    }
  }
  
  console.log(`üìä Like: ${migrated} owner keys migrated`)
  return migrated
}

/**
 * ÁßªË°åÁµêÊûú„ÅÆÊ§úË®º
 */
async function verifyMigration() {
  console.log('\nüîç Verifying migration...')
  
  const pipeline = redis.pipeline()
  pipeline.keys('bbs_messages:*')
  pipeline.keys('bbs_owner:*')
  pipeline.keys('ranking_scores:*')
  pipeline.keys('ranking_owner:*')
  pipeline.keys('counter_owner:*')
  pipeline.keys('like_owner:*')
  const results = await pipeline.exec()
  
  const oldKeys = [
    ...(results[0][1] || []),
    ...(results[1][1] || []),
    ...(results[2][1] || []),
    ...(results[3][1] || []),
    ...(results[4][1] || []),
    ...(results[5][1] || [])
  ]
  
  if (oldKeys.length === 0) {
    console.log('‚úÖ Migration successful - no old keys remaining')
    return true
  } else {
    console.log('‚ö†Ô∏è  Old keys still exist:')
    oldKeys.forEach(key => console.log(`  - ${key}`))
    return false
  }
}

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  console.log('üöÄ Redis Key Migration - Starting...')
  console.log('Fixing inconsistent key naming patterns to match specification')
  
  try {
    const bbsMigrated = await migrateBBSKeys()
    const rankingMigrated = await migrateRankingKeys()
    const counterMigrated = await migrateCounterOwnerKeys()
    const likeMigrated = await migrateLikeOwnerKeys()
    
    const totalMigrated = bbsMigrated + rankingMigrated + counterMigrated + likeMigrated
    
    if (totalMigrated > 0) {
      console.log(`\nüìà Migration Summary: ${totalMigrated} keys migrated`)
      await verifyMigration()
    } else {
      console.log('\nüìã No keys needed migration - database is already consistent')
    }
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error.message)
    process.exit(1)
  } finally {
    await redis.quit()
  }
  
  console.log('\nüéâ Migration complete!')
}

main().catch(error => {
  console.error('‚ùå Fatal error:', error)
  process.exit(1)
})